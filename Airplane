/**
 * Write a description of class Airplane here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
import java.util.Random;
import java.util.Scanner;

public class Airplane
{
   private final int ROW = 13;  //ROW 1 - 12
   private final int SECTION = 5; //SEAT A - D
   private Seat[][] seats;
   private Random generator = new Random();
   private final int numberOfSeats = 48;
   private int grouping;
   private int startRow;
   private int startColumn;
   private int rowPartner;
   private int columnPartner; 
   private int seatsLeft;
   private int numberOfRandom;
   
   public Airplane()
   {
       seatsLeft = 48;
       numberOfRandom = 2;
       seats = new Seat[SECTION][ROW];
       initializeSeats();
   }
    
   public void initializeSeats()
   {
       for (int j = 1; j < ROW; j++)
       {
           boolean firstClass = true;
           if (j > 4)
                firstClass = false;
                
           for (int i = 1; i < SECTION; i++)
           {
               String section = "E";
               boolean windowView = true;
               
               if (i == 1)
                   section = "A";
               else if (i == 2)
               {
                   section = "B";
                   windowView =false;
                }
               else if (i == 3)
               {
                   section = "C";
                   windowView = false;
                }
                else
                    section = "D";
              
               Seat temp = new Seat(section,j);
               temp.setWindowView(windowView);
               //temp.setSeatSection(section);
               temp.setSeatClass(firstClass);
               seats[i][j] = temp;
            }
        }
    }

   public void windowSingle(Passenger p)
   {
       for (int j = 1; j < 2; j++)
       {  
           for (int i = 1; i < SECTION; i++)
           {
               if (seats[SECTION][j].getVacancy() == true)
               {
                   seats[SECTION][j].assignPassenger(p);
                   seats[SECTION][j].setVacancy(false);
               }
               
               else if (seats[SECTION][4].getVacancy() == true)
               {
                   seats[SECTION][4].assignPassenger(p);
                   seats[SECTION][4].setVacancy(false);
               }
           }
       }
   }
    
   public void notWindowSingle(Passenger p)
   {
       for (int j = 2; j < 4; j++)
       {  
           for (int i = 1; i < SECTION; i++)
           {
               if (seats[SECTION][j].getVacancy() == true)
               {
                   seats[SECTION][j].assignPassenger(p);
                   seats[SECTION][j].setVacancy(false);
               }
           }
       }
   }
   
   public void randomFill()
   {
       Random generator = new Random();
       int counter = 1;
       while(counter <= numberOfRandom)
        {
           int section = generator.nextInt(4) + 1;
           int row = generator.nextInt(12) + 1;
            
           if (seats[section][row].getVacancy() == true)
           {
               seats[section][row].setVacancy(false);
               Passenger jay = new Passenger("Jay" + counter, "Chou");
               seats[section][row].assignPassenger(jay);
               seatsLeft--;
               counter++;
           }
       }
   }
   
   public void randomSeating(Passenger p, int grouping)
   {
           Random generator = new Random();
           int section = generator.nextInt(ROW-1) + 1;
           int row = generator.nextInt(SECTION-1) + 1;   
           if (seats[row][section].getVacancy() == true)
           {
               seats[row][section].setVacancy(false);
               seats[row][section].assignPassenger(p);
               seatsLeft--;
           }
   }
   
   public void reserveSeats(Passenger p, String row, int seatNumber)
   {
       if (row.equalsIgnoreCase("a") && (seats[1][seatNumber].getVacancy() == true))
       {
           seats[1][seatNumber].assignPassenger(p);
           seats[1][seatNumber].setVacancy(false);
           seatsLeft--;
       }
       else if (row.equalsIgnoreCase("b") && (seats[2][seatNumber].getVacancy() == true))
       {
           seats[2][seatNumber].assignPassenger(p);
           seats[2][seatNumber].setVacancy(false);
           seatsLeft--;
       }
       else if (row.equalsIgnoreCase("c") && (seats[3][seatNumber].getVacancy() == true))
       {
           seats[3][seatNumber].assignPassenger(p);
           seats[3][seatNumber].setVacancy(false);
           seatsLeft--;;
       }
       else if (row.equalsIgnoreCase("d") && (seats[4][seatNumber].getVacancy() == true))
       {
           seats[4][seatNumber].assignPassenger(p);
           seats[4][seatNumber].setVacancy(false);
           seatsLeft--;;
       }
       else
       {
           System.out.println("Cannot be done.");
       }
   }
   
   public void printSeats() //*
   {
       for (int j = 1; j < SECTION; j++)
       {
           for (int i = 1; i < ROW; i++)
           {
               if (seats[j][i].getVacancy()==false)
                   System.out.print("["+"X"+"]  ");
               else
               System.out.print("[ " + "]  ");
           }
           System.out.println();
       }
   }
   
   public boolean rowPreferences(int grouping) //*
   {
       int count = 0;       
       if (grouping > 1)
       {
           for (int i = 0; i < SECTION; i++)
           {
               for (int j = 0; j < ROW; j++)
               {
                   if (seats[i][j].getVacancy() == true)
                   {
                       count++;
                       startRow = j;
                       rowPartner = i;
                   }
                   else
                   {
                       count = 0;
                       startRow = -1;
                       rowPartner = -1;
                   }
               }
           }
       }
       
       else
       {
           return true;
       }
       if (count == grouping)
       {
           startRow = startRow-grouping;
           return true;
       }
       else
       {
           return false;
       }
   }
   
   public boolean columnPreferences (int grouping) //*
   {
       int count = 0;       
       if (grouping <=4)
       {
           for (int i = 0; i < ROW; i++)
           {
               for (int j = 0; j < SECTION; j++)
               {
                   if (seats[i][j].getVacancy() == true)
                   {
                       count++;
                       startColumn = j-grouping;
                   }
                   else
                   {
                       count = 0;
                   }
               }
           }
       }
       
       else
       {
           return true;
       }
       if (count == grouping)
       {
           startColumn = startColumn-grouping;
           return true;
       }
       else
       {
           return false;
       }
   }
   
   public void assignment(Passenger p, int grouping)
   {
       if (rowPreferences(grouping) == true)
       {
           for (int i = startRow; i < startRow+grouping; i++)
           {
               seats[rowPartner][i].assignPassenger(p);
               seats[rowPartner][i].setVacancy(false);
               seatsLeft = seatsLeft - grouping;
           }
       }
   }
   
   public void printName()
     {
          for(int k =1; k < ROW;k++)
          {
              for(int i = 1; i < SECTION; i++)
              {
                if(seats[i][k].getVacancy()== false)
                  {
                 System.out.println("Row: " + k + " Passengers: " + seats[i][k].getPassenger().getFullName());
                  }
              }
          }
      }
   
   public void displayMenu() //*
   {
       
   Scanner input = new Scanner(System.in);
   boolean cont = true;
   
   while(cont == true)
   {
           
           System.out.println();
           System.out.println("Enter 0 to display all seats");
           System.out.println("Enter 1 to reserve seats manually");
           System.out.println("Enter 2 to reserve any available seats (no preferences) for one person");
           System.out.println("Enter 3 to reserve seats with preferential seating");
           System.out.println("Enter 4 to cancel/update a reservation");
           System.out.println("Enter 5 to print all passengers names");
           System.out.println("Enter any other number to exit");
           int a = input.nextInt();

           if(a == 0) 
           {
               printSeats();            
           }
           
           else if(a == 1)
           {
               System.out.print("Enter in your first name: ");
               String firname = input.next();
               System.out.print("Enter in your last name: ");
               String laname = input.next();
               Passenger donny = new Passenger(firname, laname);
               System.out.println("Enter in row letter and seat number: ");
               String bow = input.next();
               reserveSeats(donny, bow.substring(0,1), Integer.parseInt(bow.substring(1)));
           }
           
           else if(a == 2) 
           {
               System.out.print("Enter in your first name: ");
               String firname = input.next();
               System.out.print("Enter in your last name: ");
               String laname = input.next();
               Passenger donny = new Passenger(firname, laname);
               randomSeating(donny, 1);
           }
           
           else if(a == 3) 
           {
               System.out.print("Enter in your first name: ");
               String firname = input.next();
               System.out.print("Enter in your last name: ");
               String laname = input.next();
               Passenger donny = new Passenger(firname, laname);
               System.out.println("Would you like to be seated in a group or as a single?");
               System.out.println("Enter 1 for single, 2 for group");
               int choice = input.nextInt();
               if (choice == 1)
               {
                   System.out.print("Would you like to reserve a window seat? (y/n)");
                   if (input.next().equalsIgnoreCase("y"))
                   {
                       windowSingle(donny);
                   }
                   else
                   {
                       notWindowSingle(donny);
                   }
               }
               
               else if (choice == 2)
               {
                   System.out.println("How many people would you like to be grouped with?");
                   int grouping = input.nextInt();
                   if (rowPreferences(grouping) == true)
                   {
                       
                   }
               }
               
               else
               {
                   System.out.print("That is not a valid option");
               }
           }
           
           else if(a == 4) 
           {
               
           }
           
           else if(a == 5) //*
           {
               printName();
           }
           
           else 
           {
               cont = false;
           }
   }
   } 
}
